name: Pull Request

on:
  pull_request:
    branches: ['master']

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          PROJECTS=$(find . -name '*.Tests.csproj' | jq -R -s -c 'split("\n")[:-1]')
          MATRIX=$(jq -n \
            --arg projects "$PROJECTS" \
            '{
              "include": [
                $projects | fromjson[] as $p | 
                ["net8.0", "net9.0"][] | 
                {"test_project": $p, "framework": .}
              ]
            }')
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT
        shell: bash

  tests:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8
            9
      
      - name: Docker Information
        run: |
          echo -e "\n\033[0;34mDocker System Info \033[0m"
          docker system info
          echo -e "\n\033[0;34mDocker Containers \033[0m"
          docker ps -a
        shell: bash

      - name: Restore tools
        run: dotnet tool restore
        shell: bash

      - name: Build project
        run: |
          dotnet build "${{ matrix.test_project }}" -c Debug /p:WarningLevel=0 -f "${{ matrix.framework }}"
        shell: bash

      - name: Run tests
        run: |
          echo -e "\n\033[0;34mTesting ${{ matrix.test_project }} (${{ matrix.framework }})\033[0m\n"
          dotnet test "${{ matrix.test_project }}" -c Debug --no-build -f "${{ matrix.framework }}" -p:"CollectCoverage=true" -p:"Exclude=[xunit.*]*" -p:"CoverletOutputFormat=opencover"
        shell: bash
